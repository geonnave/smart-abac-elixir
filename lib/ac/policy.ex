defmodule AC.Policy do
  @moduledoc """
  Specifies a Policy model for access control in the Swarm.

  This specification follows a number of requirements. Sometimes these requirements conflict with each other,
  so we try to flexibilize them and obtain a hybrid system, harmonizing theoretical and practical goals.

  * Enumerated Access Policy (EAP): the policy consists of an enumeration of terms, without logical expressions.
    When compared to Logical Access Policies (LAPs), some advantages of EAPs include the (general) notion of micro policies
    and ease of update.
  * Practical expressiveness: many models have been proposed for ABAC systems with varying degrees of expressiveness.
    For example, EAP has been proved to be theoretically equivalent to LAP with respect to expressive power.
    However, some approaches are not well suited for practical systems, such as the single-valued EAP modification
    introduced by Biswas et al. (2017), in which values were generated by the concatenation of all possible attributes
    from a multi-valued EAP. Thus, we go directly to a multi-value EAP proposal, in order to harmonize theoretical and practical needs.
    Such characteristics are desired in the Swarm, as they facilitate policy sharing and policy partitioning.
  * **TODO** Semantic annotations: in order to foster attribute interoperability and expand the reach of a policy,
    we envision that policies will use semantic tags. Thus, we allow a policy to be semantically tagged: beyond using
    semantic tags in the general listing of attributes, an optional field allows for placement of metadata with
    characteristics that describe the target environment where a policy is expected to operate.
  """

  defstruct id: nil, name: "", user_attrs: [], operations: [], object_attrs: []

  @type t :: %__MODULE__{
          id: String.t(),
          name: String.t(),
          user_attrs: [Attribute.t()],
          operations: [String.t()],
          object_attrs: [Attribute.t()]
        }
end
